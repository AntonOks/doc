#!/usr/bin/env raku

use Test;
use lib $*PROGRAM.parent(2).child('lib');

=begin overview

Test the Test-Files module

=end overview

plan 33;
use-ok 'Test-Files';

use Test-Files;

# We could ourselves be running with TEST_FILES set - ignore it for now...
%*ENV<TEST_FILES>='';

my @files = Test-Files.files();
ok @files.elems > 1, '.files returns something array-like with at least one item';
ok all(@files.map(*.IO.f)), 'all files returned exist';

my @pods = Test-Files.pods();
ok @pods.elems > 1, '.pods returns something array-like with at least one item';
ok all(@pods>>.ends-with('.raku'|'.rakudoc'|'.rakutest'|'.rakumod')), 'all files returned are raku files';
ok all(@pods.map(*.IO.f)), 'all files returned exist';

my @docs = Test-Files.documents();
ok @docs.elems > 1, '.documents returns something array-like with at least one item';
ok all(@docs>>.ends-with('.raku'|'.rakudoc'|'.md'|'.rakutest'|'.rakumod')), 'all files returned are raku/md files';
ok all(@docs.map(*.IO.f)), 'all files returned exist';

my @tests = Test-Files.tests();
ok @tests.elems > 1, '.tests returns something array-like with at least one item';
ok all(@tests>>.ends-with('.rakutest')), 'all files returned are test files';
ok all(@tests.map(*.IO.f)), 'all files returned exist';

my $expected = q:to/END/;
files
foo,foo.md,foo.rakudoc,foo.rakumod,foo.rakutest
pods
foo.rakudoc,foo.rakumod,foo.rakutest
docs
foo.md,foo.rakudoc,foo.rakumod,foo.rakutest
tests
foo.rakutest
---
END

is run($*EXECUTABLE, 'xt/lib-test-files.raku', 'foo.rakutest', 'foo.rakudoc', 'foo.md', 'foo.rakumod', 'foo', :out).out.slurp(:close), $expected, 'correct (sorted) output from command line usage';

# Now test the specific TEST_FILES we want...
%*ENV<TEST_FILES>='this-file-does-not-exist xt/lib-test-files.rakutest';
is Test-Files.files, 'xt/lib-test-files.rakutest', 'TEST_FILES .rakutest in files()';
is Test-Files.pods, 'xt/lib-test-files.rakutest', 'TEST_FILES .rakutest in pods()';
is Test-Files.documents, 'xt/lib-test-files.rakutest', 'TEST_FILES .rakutest in documents()';
is Test-Files.tests, 'xt/lib-test-files.rakutest', 'TEST_FILES .rakutest in tests()';

%*ENV<TEST_FILES>='this-file-does-not-exist CONTRIBUTING.md';
is Test-Files.files, 'CONTRIBUTING.md', 'TEST_FILES .md in files()';
is Test-Files.pods, '', 'TEST_FILES .md in pods()';
is Test-Files.documents, 'CONTRIBUTING.md', 'TEST_FILES .md in .documents()';
is Test-Files.tests, '', 'TEST_FILES .md in .tests';

%*ENV<TEST_FILES>='this-file-does-not-exist doc/Type/Mu.rakudoc';
is Test-Files.files, 'doc/Type/Mu.rakudoc', 'TEST_FILES .rakudoc in files()';
is Test-Files.pods, 'doc/Type/Mu.rakudoc', 'TEST_FILES .rakudoc in pods()';
is Test-Files.documents, 'doc/Type/Mu.rakudoc', 'TEST_FILES  .rakudoc in documents()';
is Test-Files.tests, '', 'TEST_FILES .rakudoc in tests()';

%*ENV<TEST_FILES>='this-file-does-not-exist lib/Test-Files.rakumod';
is Test-Files.files, 'lib/Test-Files.rakumod', 'TEST_FILES .rakumod in files()';
is Test-Files.pods, 'lib/Test-Files.rakumod', 'TEST_FILES .rakumod in pods()';
is Test-Files.documents, 'lib/Test-Files.rakumod', 'TEST_FILES .rakumod in tests()';
is Test-Files.tests, '', 'TEST_FILES .rakumod in tests()';

%*ENV<TEST_FILES>='this-file-does-not-exist xt/lib-test-files.raku';
is Test-Files.files, 'xt/lib-test-files.raku', 'TEST_FILES .raku in files()';
is Test-Files.pods, 'xt/lib-test-files.raku', 'TEST_FILES .raku in pods()';
is Test-Files.documents, 'xt/lib-test-files.raku', 'TEST_FILES .raku in tests()';
is Test-Files.tests, '', 'TEST_FILES .raku in tests()';
